#include <bits/stdc++.h>
using namespace std;

vector<vector<int>> Graph, cenTree, up;
vector<multiset<int>> sets;
vector<int> par, sz, cenTreePar, height;
vector<bool> visited, centroidMarked, white;

int dfs1(int v, int depth, int parent)
{
  int curr = 1;
  visited[v] = true;
  par[v] = parent;
  height[v] = depth;
  for (auto vv : Graph[v])
    if (!visited[vv])
      curr += dfs1(vv, depth + 1, v);
  return sz[v] = curr;
}

int dfs2(int v, int parent)
{
  int curr = 1;
  for (auto vv : Graph[v])
    if (!centroidMarked[vv] && vv != parent)
      curr += dfs2(vv, v);
  return sz[v] = curr;
}

int getCentroid(int v, int parent, int subTreeSize)
{
  for (auto vv : Graph[v])
    if (!centroidMarked[vv] && vv != parent && sz[vv] > subTreeSize / 2)
      return getCentroid(vv, v, subTreeSize);
  return v;
}

int decompose(int v, int n, int subTreeSize)
{
  int centroid = getCentroid(v, -1, subTreeSize);
  centroidMarked[centroid] = true;
  for (auto vv : Graph[centroid])
    if (!centroidMarked[vv])
    {
      int newSubTreeSize = dfs2(vv, v);
      int childCentroid = decompose(vv, n, newSubTreeSize);
      cenTreePar[childCentroid] = centroid;
      cenTree[centroid].push_back(childCentroid);
      cenTree[childCentroid].push_back(centroid);
    }
  return centroid;
}

void preUp(int n, int l)
{
  for (int i = 1; i <= n; ++i)
    up[i][0] = par[i];
  for (int j = 1; j <= l; ++j)
    for (int i = 1; i <= n; ++i)
      if (up[i][j - 1])
        up[i][j] = up[up[i][j - 1]][j - 1];
}

int LCA(int x, int y, int l)
{
  if (height[y] > height[x])
    swap(x, y);
  for (int j = l; j >= 0; --j)
    if (up[x][j] && height[up[x][j]] >= height[y])
      x = up[x][j];
  if (x == y)
    return x;
  for (int j = l; j >= 0; --j)
    if (up[x][j] != up[y][j])
    {
      x = up[x][j];
      y = up[y][j];
    }
  return up[x][0];
}

int dist(int u, int v, int l)
{
  return height[u] + height[v] - 2 * height[LCA(u, v, l)];
}

void solve(int l)
{
  int t, v, ver, ans = INT_MAX;
  cin >> t >> v;
  ver = v;
  if (!t)
    white[v] = !white[v];
  while (true)
  {
    if (!t)
    {
      int dis = dist(v, ver, l);
      if (white[v])
        sets[ver].insert(dis);
      else
      {
        auto it = sets[ver].find(dis);
        sets[ver].erase(it);
      }
    }
    else if (sets[ver].size())
      ans = min(ans, dist(v, ver, l) + *sets[ver].begin());
    ver = cenTreePar[ver];
    if (ver == -1)
      break;
  }
  if (t == 1)
    cout << (ans == INT_MAX ? -1 : ans) << '\n';
}

int main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);

  int n, u, v, mul = 2, l = 1, m;
  cin >> n;
  while (mul * 2 < n)
    mul *= 2, ++l;
  ++l;
  Graph.resize(n + 5), cenTree.resize(n + 5), par.resize(n + 5), sz.resize(n + 5), visited.resize(n + 5), centroidMarked.resize(n + 5), up.resize(n + 5, vector<int>(l + 5)), height.resize(n + 5), cenTreePar.resize(n + 5), sets.resize(n + 5), white.resize(n + 5);
  for (int i = 0; i < n - 1; ++i)
  {
    cin >> u >> v;
    Graph[u].push_back(v);
    Graph[v].push_back(u);
  }
  dfs1(1, 0, 0);
  preUp(n, l);
  int cenTreeRoot = decompose(1, n, n);
  cenTreePar[cenTreeRoot] = -1;
  cin >> m;
  while (m--)
    solve(l);
}
